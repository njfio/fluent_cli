# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

**/.env

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb
.idea/vcs.xml
.idea/fluent_cli.iml
.idea/markdown.xml
.idea/modules.xml
.idea/workspace.xml
fluent_cli/.DS_Store
fluent_cli/available_fields_cache.json
fluent_cli/functional_tests/available_fields_cache.json
*.png
/fluent_cli/lib
/fluent_cli/lib
fluent_cli/glove.6B.300d.txt
/.idea
/.idea
source_compilation.txt
/pipeline_states
/pipeline_states
.DS_Store
.DS_Store
crates/.DS_Store
.DS_Store
crates/.DS_Store

# Build and test logs
*.log
build_output.log
test_output.log

# Binary artifacts (should not be in version control)
amber-*
*-x86_64-*
*.exe

# Test data and temporary files
test.txt
demo_*.db
demo_*.sh
*.test

# Temporary files
*.tmp
*.temp
temp_*

# IDE and editor files
.vscode/
*.swp
*.swo
*~

# Python cache and temporary files
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.env
.venv

# Node.js (if any frontend dependencies)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Database files (unless specifically needed)
*.db
*.sqlite
*.sqlite3

# Cache directories
.cache/
cache/
fluent_cache*

# Audit and analysis files
*_audit.txt
*_audit.json
*profiling_report.txt
*_analysis.md
*_report.md

# Large generated files
enhanced_reflection_profiling_report.txt
reasoning_engine_profiling_report.txt
key_safe.txt

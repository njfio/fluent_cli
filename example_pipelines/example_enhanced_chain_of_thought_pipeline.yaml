name: frogger_clone_builder

steps:
  - !ShellCommand
    name: generate_game_mechanics
    command: |
      fluent openai '' --parse-code > game_mechanics.py <<EOT
      Write Python code for the core game mechanics of a Frogger clone, including:
        - Player movement (up, down, left, right)
        - Frog collision detection with cars, water, and logs
        - Level progression with increasing difficulty (more cars, faster speeds)
        - Basic game logic (scoring, lives, win conditions)

      Ensure the game is solvable with proper level design.
      Use clear and concise variable names and comments to improve readability.
      EOT

  - !ShellCommand
    name: generate_car_movement
    command: |
      fluent openai '' --parse-code > car_movement.py <<EOT
      Write Python code to generate different types of moving cars (left to right, right to left) on separate lanes within the game. 
      Ensure cars have varying speeds and patterns to create challenges but allow for safe passage.

      Include comments to explain the logic behind car movement.
      EOT

  - !ShellCommand
    name: generate_log_movement
    command: |
      fluent openai '' --parse-code > log_movement.py <<EOT
      Write Python code to generate different types of moving logs (left to right, right to left) on separate lanes within the river. 
      Ensure logs have varying speeds and patterns to create challenges but allow for safe crossing.

      Include comments to explain the logic behind log movement.
      EOT

  - !ShellCommand
    name: generate_environment
    command: |
      fluent openai '' --parse-code > environment.py <<EOT
      Write Python code to define the game environment for Frogger, including:
        - A road with multiple lanes
        - A wide river at the top 1/4 of the screen with lily pads (safe zones)
        - A safe zone on the opposite side of the river

      Ensure the environment layout allows the player to reach the safe zone while avoiding obstacles.
      Use appropriate data structures to represent the game environment.
      EOT

  - !ShellCommand
    name: generate_game_loop
    command: |
      fluent openai '' --parse-code > game_loop.py <<EOT
      Write Python code for the main game loop of Frogger. The loop should handle:
        - User input for player movement
        - Updating car, water, and log positions
        - Checking for collisions between the player and cars, water, and logs
        - Managing player interactions with logs (landing, jumping off)
        - Game over conditions (collision with water or car, exceeding time limit, reaching safe zone)
        - Updating the game state (environment, player, cars, logs, score, lives) after each update

      Ensure the game loop consistently checks for win conditions.
      Incorporate comments to explain the game loop logic.
      EOT

  - !ShellCommand
    name: generate_ui_spec
    command: |
      fluent openai '' --parse-code > ui_spec.json <<EOT
      Write a JSON specification for the user interface (UI) of the Frogger clone. 

      The UI should include:
        - Game window dimensions
        - Background image for the road, river, and safe zone
        - Sprites for player, cars, logs, lily pads, and game elements
        - Text elements for score, lives, time remaining, and win/lose messages

      Define the layout and positioning of these elements for a clear and user-friendly experience.
      EOT

  - !ShellCommand
    name: generate_ui_code
    command: |
      python generate_ui.py ${PWD}/ui_spec.json > ui_main.py <<EOT
      Write Python code using the Pygame library to implement the UI based on the provided UI specification (ui_spec.json).

      Handle user input for game controls (movement, pausing).
      Display the game state (environment, player, cars, logs, score, time) using appropriate visuals.
      EOT

  - !ShellCommand
    name: combine_code
    command: |
      cat game_mechanics.py car_movement.py log_movement.py environment.py game_loop.py ui_main.py > frogger_game.py
      echo "# Additional Notes" >> frogger_game.py
      echo "# This combined file includes all core game logic and UI implementation." >> frogger_game.py
      > combined_code.py

  - !ShellCommand
    name: summarize_pipeline
    command: |
      fluent openai '' > pipeline_summary.txt <<EOT
      Summarize the steps taken in this pipeline to build a Frogger clone in Python. 
      Mention the generated functionalities and the importance of ensuring game solvability.
      EOT 

  - !PrintOutput
    name: print_completion
    value: |
      ======= Frogger Clone Builder Pipeline Complete =======
      
      The core game logic, car movement, environment, and game loop code have been generated in Python files:
      - game_mechanics.py
      - car_movement.py
      - log_movement.py
      - environment.py
      - game_loop.py
      - ui_main.py
      - combined_code.py

      A mockup UI image (ui_mockup.png) has also been created for reference.

      Remember to implement additional features like levels, power-ups, and sound effects to enhance gameplay.
      
      You can find all the generated code files in the working directory.
      
      Thank you for using the Frogger Clone Builder Pipeline!
      =======================================================================

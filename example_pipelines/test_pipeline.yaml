name: comprehensive_pipeline
steps:
  - !Command
    name: simple_command
    command: fluent llama3-groq "hello world"
    save_output: greeting

  - !ShellCommand
    name: complex_shell_command
    command: |
      for i in {1..3}; do
        echo "Iteration $i"
      done
    save_output: loop_result

  - !Condition
    name: check_greeting
    condition: "[ '${greeting}' = 'hello world' ]"
    if_true: echo "Greeting is correct"
    if_false: echo "Greeting is incorrect"

  - !PrintOutput
    name: display_results
    value: "Greeting: ${greeting}, Loop Result: ${loop_result}"

  - !Map
    name: process_items
    input: "apple,banana,cherry"
    command: echo "Processing ${ITEM}"
    save_output: processed_fruits

  - !HumanInTheLoop
    name: get_user_input
    prompt: "Please enter your favorite color:"
    save_output: user_color

  - !Command
    name: create_story
    command: fluent cohere "tell me a story about ${user_color}, just output the story"
    save_output: story_data

  - !ShellCommand
    name: initialize_counter
    command: echo "0"
    save_output: counter

  - !RepeatUntil
    name: count_to_five
    steps:
      - !ShellCommand
        name: increment_counter
        command: |
          counter=$((${counter} + 1))
          echo $counter
        save_output: counter
      - !ShellCommand
          name: create_story
          command: fluent perplexity "tell me a joke about ${user_color}, just output the joke"
          save_output: joke_data
      - !PrintOutput
          name: display_counter
          value: "Current count: ${counter}.  Current joke: ${joke_data}"
    condition: "[ ${counter} -ge 5 ]"

  - !PrintOutput
    name: final_output
    value: |
      Pipeline Execution Summary:
      ---------------------------
      Greeting: ${greeting}
      Loop Result: ${loop_result}
      Story: ${story_data}
      Joke: ${joke_data}
      Processed Fruits: ${processed_fruits}
      User's Favorite Color: ${user_color}
      Final Counter Value: ${counter}